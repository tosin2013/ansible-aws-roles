---
- name: Searching for the latest AMI image using ami_name and AMI_OWNER
  ansible.builtin.debug:
    msg: "Searching for the latest AMI image using ami_name '{{ ami_name }}' and AMI_OWNER '{{ AMI_OWNER }}'"
  tags:
    - create-ec2instance

- name: Search for the latest AMI image
  amazon.aws.ec2_ami_info:
    region: "{{ vpc_region }}"
    filters:
      name: "{{ ami_name }}"  # Using a variable for the AMI name
      owner-id: "{{ AMI_OWNER }}"  # Using a variable for the owner ID
  register: ami_info_result
  failed_when: ami_info_result.images | length == 0
  tags:
    - create-ec2instance

- name: Set the AMI ID as a fact
  set_fact:
    ami_id: "{{ ami_info_result.images[0].image_id }}"
  tags:
    - create-ec2instance

- name: Print the AMI ID
  debug:
    msg: "The AMI ID is {{ ami_id }}"
  tags:
    - create-ec2instance

- name: Query EC2 Instances
  amazon.aws.ec2_instance_info:
    region: "{{ VPC_REGION }}"
    filters:
      "tag:Name": "{{ vpc_name }}-{{ SERVER_ROLE }}-0{{ item.0 + 1 }}"
      "tag:Environment": "{{ ENVIRONMENT }}"
      "tag:Server_Role": "{{ SERVER_ROLE }}"
      instance-state-name: ["running", "stopped"]
  with_indexed_items: "{{ EC2_PRIVATE_SUBNET_ID }}"
  register: existing_ec2_instances
  tags:
    - create-ec2instance
    - aws_infra
    - aws_ec2

- name: Debug Content of existing_ec2_instances
  debug:
    var: existing_ec2_instances
  tags:
    - create-ec2instance

- name: Check Length of Instances for each Subnet
  debug:
    msg: "The length of instances for subnet {{ item.item.1 }} is {{ item.instances | length }}"
  loop: "{{ existing_ec2_instances.results }}"
  tags:
    - create-ec2instance

- name: Show length of existing_ec2_instances.results
  debug:
    msg: "The length of existing_ec2_instances.results is {{ existing_ec2_instances.results | length }}"
  tags:
    - create-ec2instance

- name: Show length of existing_ec2_instances.results.instances
  debug:
    msg: "The length of existing_ec2_instances.results[0].instances is {{ existing_ec2_instances.results[0].instances | length }}"
  ignore_errors: true
  tags:
    - create-ec2instance

- name: Set existing_ec2_instances_list fact as a list
  set_fact:
    existing_ec2_instances_list: "{{ existing_ec2_instances_list | default([]) + [item.instances] }}"
  ignore_errors: true
  loop: "{{ existing_ec2_instances.results }}"
  tags:
    - create-ec2instance

- name: Debug existing_ec2_instances_list
  debug:
    var: existing_ec2_instances_list
  ignore_errors: true
  tags:
    - create-ec2instance

- name: debug print out if existing_ec2_instances_list in not empty when deploy_public_ec2_instance is true
  debug:
    msg: "existing_ec2_instances_list is not empty"
  when: existing_ec2_instances_list | default([]) | map('length') | list | sum > 0 and deploy_public_ec2_instance | bool
  ignore_errors: true
  tags:
    - create-ec2instance

- name: debug print out if existing_ec2_instances_list empty when deploy_public_ec2_instance is true
  debug:
    msg: "existing_ec2_instances_list is not empty"
  when: not existing_ec2_instances_list | default([]) | map('length') | list | sum > 0 and deploy_public_ec2_instance | bool
  ignore_errors: true
  tags:
    - create-ec2instance

- name: Create EC2 Public Instance(s)
  amazon.aws.ec2_instance:
    region: "{{ VPC_REGION }}"
    security_groups: "{{ ec2_security_group_name }}"
    key_name: "{{ ec2_key_name }}"
    instance_type: "{{ ec2_instance_type }}"
    image_id: "{{ ami_id }}"
    vpc_subnet_id: "{{ item.1 }}"
    network:
      assign_public_ip: yes
    wait: True
    wait_timeout: 600
    user_data: "{{ user_data_script }}"
    tags:
      - aws_infra
      - aws_ec2
    volumes:
      - device_name: /dev/sda1
        ebs:
          volume_type: gp3
          volume_size: "{{ ec2_volume_size }}"
          delete_on_termination: yes
    count: "{{ ec2_count }}"
  with_indexed_items: "{{ EC2_PUBLIC_SUBNET_ID }}"
  register: existing_ec2_instances
  when:  deploy_public_ec2_instance and (not existing_ec2_instances_list | default([]) | map('length') | list | sum > 0 and deploy_public_ec2_instance | bool)
  tags:
    - create-ec2instance

- name: Create EC2 Private Instance(s)
  amazon.aws.ec2_instance:
    region: "{{ VPC_REGION }}"
    security_groups: "{{ ec2_security_group_name }}"
    key_name: "{{ ec2_key_name }}"
    instance_type: "{{ ec2_instance_type }}"
    image_id: "{{ ami_id }}"
    vpc_subnet_id: "{{ item.1 }}"
    network:
      assign_public_ip: no
    wait: True
    wait_timeout: 600
    user_data: "{{ user_data_script }}"
    volumes:
      - device_name: /dev/sda1
        ebs:
          volume_type: gp3
          volume_size: "{{ ec2_volume_size }}"
          delete_on_termination: yes
    count: "{{ ec2_count }}"
  with_indexed_items: "{{ EC2_PRIVATE_SUBNET_ID }}"
  register: ec2
  when: not deploy_public_ec2_instance and (not existing_ec2_instances_list | default([]) | map('length') | list | sum > 0 and deploy_public_ec2_instance | bool)
  tags:
    - create-ec2instance

- name: Query Deployed EC2 Instances
  amazon.aws.ec2_instance_info:
    region: "{{ VPC_REGION }}"
    filters:
      "tag:Name": "{{ vpc_name }}-{{ SERVER_ROLE }}-0{{ item.0 + 1 }}"
      "tag:Environment": "{{ ENVIRONMENT }}"
      "tag:Server_Role": "{{ SERVER_ROLE }}"
      instance-state-name: ["running"]
  with_indexed_items: "{{ EC2_PUBLIC_SUBNET_ID }}"
  register: wait_for_ec2_instances
  async: 120  # Set the maximum time to wait in seconds (adjust as needed)
  poll: 0  # Start polling immediately
  tags:
    - create-ec2instance

- name: Wait for deployed EC2 instances and collect IP addresses
  async_status:
    jid: "{{ item.ansible_job_id }}"
  register: async_result
  until: async_result.finished
  retries: 600
  delay: 10
  loop: "{{ wait_for_ec2_instances.results }}"
  when: deploy_public_ec2_instance
  tags:
    - create-ec2instance

- name: Get Public IP Addresses
  set_fact:
    public_ips: []
  when: deploy_public_ec2_instance
  tags:
    - create-ec2instance

- name: Query EC2 Instances
  amazon.aws.ec2_instance_info:
    region: "{{ VPC_REGION }}"
    filters:
      "tag:Name": "{{ vpc_name }}-{{ SERVER_ROLE }}-0{{ item.0 + 1 }}"
      "tag:Environment": "{{ ENVIRONMENT }}"
      "tag:Server_Role": "{{ SERVER_ROLE }}"
      instance-state-name: ["running", "stopped"]
  with_indexed_items: "{{ EC2_PRIVATE_SUBNET_ID }}"
  register: deployed_ec2_instances
  tags:
    - create-ec2instance
    - aws_infra
    - aws_ec2

- name: loop thru item.instances[0]
  debug:
    msg: "{{ item }}"
  loop: "{{ deployed_ec2_instances.results }}"
  when: deploy_public_ec2_instance
  tags:
    - create-ec2instance

- name: Extract Public IP Addresses
  set_fact:
     public_ips: "{{ public_ips + [item.instances[0].public_ip_address] }}"
  loop: "{{ deployed_ec2_instances.results }}"
  when: deploy_public_ec2_instance
  tags:
    - create-ec2instance

- name: Debug Public IP Addresses
  debug:
    var: public_ips
  when: deploy_public_ec2_instance
  tags:
    - create-ec2instance

- name: Add the newly created EC2 instance(s) to the local host group (located at ./inventory/hosts)
  ansible.builtin.lineinfile:
    dest: "./inventory/hosts"
    regexp: "{{ item }}"
    insertafter: "{{ inventory_name }}"
    line: "{{ item }}"
  with_items: "{{ public_ips }}"
  tags:
    - create-ec2instance

- name: Wait for SSH to come up on EC2 Instance(s)
  ansible.builtin.wait_for:
    host: "{{ item }}"
    port: 22
    search_regex: OpenSSH
    delay: 10
  with_items: "{{ public_ips }}"
  tags:
    - create-ec2instance
