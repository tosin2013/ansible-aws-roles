---
- name: Searching for the latest AMI image using ami_name and AMI_OWNER
  ansible.builtin.debug:
    msg: "Searching for the latest AMI image using ami_name '{{ ami_name }}' and AMI_OWNER '{{ AMI_OWNER }}'"

- name: Search for the latest AMI image
  amazon.aws.ec2_ami_info:
    region: "{{ vpc_region }}"
    filters:
      name: "{{ ami_name }}"  # Using a variable for the AMI name
      owner-id: "{{ AMI_OWNER }}"  # Using a variable for the owner ID
  register: ami_info_result
  failed_when: ami_info_result.images | length == 0

- name: Set the AMI ID as a fact
  set_fact:
    ami_id: "{{ ami_info_result.images[0].image_id }}"

- name: Print the AMI ID
  debug:
    msg: "The AMI ID is {{ ami_id }}"

- name: Query EC2 Instances
  amazon.aws.ec2_instance_info:
    region: "{{ VPC_REGION }}"
    filters:
      "tag:Name": "{{ vpc_name }}-{{ SERVER_ROLE }}-0{{ item.0 + 1 }}"
      "tag:Environment": "{{ ENVIRONMENT }}"
      "tag:Server_Role": "{{ SERVER_ROLE }}"
      instance-state-name: ["running", "stopped"]
  with_indexed_items: "{{ EC2_PRIVATE_SUBNET_ID }}"
  register: existing_ec2_instances
  tags:
    - aws_infra
    - aws_ec2

- name: Create EC2 Public Instance(s)
  amazon.aws.ec2_instance:
    region: "{{ VPC_REGION }}"
    security_groups: "{{ ec2_security_group_name }}"
    key_name: "{{ ec2_key_name }}"
    instance_type: "{{ ec2_instance_type }}"
    image_id: "{{ ami_id }}"
    vpc_subnet_id: "{{ item.1 }}"
    network:
      assign_public_ip: yes
    wait: True
    wait_timeout: 600
    user_data: |
              #!/bin/sh
              sudo apt-get install nginx -y
    tags:
      Name: "{{ vpc_name }}-{{ SERVER_ROLE }}-0{{ item.0 + 1 }}"
      Environment: "{{ ENVIRONMENT }}"
      Server_Role: "{{ SERVER_ROLE }}"
    volumes:
      - device_name: /dev/sda1
        ebs:
          volume_type: gp3
          volume_size: "{{ ec2_volume_size }}"
          delete_on_termination: yes
    count: "{{ ec2_count }}"
  with_indexed_items: "{{ EC2_PUBLIC_SUBNET_ID }}"
  register: existing_ec2_instances
  when: deploy_provision_ec2_instance | bool and (existing_ec2_instances.instances is not defined or existing_ec2_instances.instances | length == 0)

- name: Create EC2 Private Instance(s)
  amazon.aws.ec2_instance:
    region: "{{ VPC_REGION }}"
    security_groups: "{{ ec2_security_group_name }}"
    key_name: "{{ ec2_key_name }}"
    instance_type: "{{ ec2_instance_type }}"
    image_id: "{{ ami_id }}"
    vpc_subnet_id: "{{ item.1 }}"
    network:
      assign_public_ip: no
    wait: True
    wait_timeout: 600
    user_data: |
              #!/bin/sh
              sudo apt-get install nginx -y
    tags:
      Name: "{{ vpc_name }}-{{ SERVER_ROLE }}-0{{ item.0 + 1 }}"
      Environment: "{{ ENVIRONMENT }}"
      Server_Role: "{{ SERVER_ROLE }}"
    volumes:
      - device_name: /dev/sda1
        ebs:
          volume_type: gp3
          volume_size: "{{ ec2_volume_size }}"
          delete_on_termination: yes
    count: "{{ ec2_count }}"
  with_indexed_items: "{{ EC2_PRIVATE_SUBNET_ID }}"
  register: ec2
  when: deploy_provision_ec2_instance | bool and (existing_ec2_instances.instances is not defined or existing_ec2_instances.instances | length == 0)

- name: Query Deployed EC2 Instances
  amazon.aws.ec2_instance_info:
    region: "{{ VPC_REGION }}"
    filters:
      "tag:Name": "{{ vpc_name }}-{{ SERVER_ROLE }}-0{{ item.0 + 1 }}"
      "tag:Environment": "{{ ENVIRONMENT }}"
      "tag:Server_Role": "{{ SERVER_ROLE }}"
      instance-state-name: ["running"]
  with_indexed_items: "{{ EC2_PRIVATE_SUBNET_ID }}"
  register: deployed_ec2_instances
  tags:
    - aws_infra
    - aws_ec2

- name: Add the newly created EC2 instance(s) to the local host group (located at ./inventory/hosts)
  ansible.builtin.lineinfile :
    dest: "./inventory/hosts" 
    regexp: "{{ item }}" 
    insertafter: "[webserver]" 
    line: "{{ item }}"
  with_items: "{{ deployed_ec2_instances.results | get_ec2_info('public_ip') }}"
 
- name: Wait for SSH to come up on EC2 Instance(s)
  ansible.builtin.wait_for:
    host: "{{ item }}" 
    port: 22 
    search_regex: OpenSSH
    delay: 10
  with_items: "{{ deployed_ec2_instances.results | get_ec2_info('public_ip') }}" 
