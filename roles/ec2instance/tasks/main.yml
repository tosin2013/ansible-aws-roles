---
- name: Search for the latest AMI image
  ec2_ami_info:
    region: "{{ vpc_region }}"
    filters:
      name: "{{ ami_name }}"  # Using a variable for the AMI name
      owner-id: "{{ ami_owner_id }}"  # Using a variable for the owner ID
    sort:
      - key: name
        direction: descending
    no_result_action: fail
  register: ami_info_result

- name: Set the AMI ID as a fact
  set_fact:
    ami_id: "{{ ami_info_result.results[0].ami_id }}"

- name: Print the AMI ID
  debug:
    msg: "The AMI ID is {{ ami_id }}"

- name: Create EC2 Instance(s)
  amazon.aws.ec2_instance:
    region: "{{ vpc_region }}"
    group: "{{ ec2_security_group_name }}"
    keypair: "{{ ec2_key_name }}"
    instance_type: "{{ ec2_instance_type }}"
    image: "{{ ami_find_result.results[0].ami_id }}"
    vpc_subnet_id: "{{ item.1 }}"
    assign_public_ip: yes
    wait: True
    wait_timeout: 600
    user_data: |
              #!/bin/sh
              sudo apt-get install nginx -y
    instance_tags:
      Name: "{{ vpc_name }}-{{ SERVER_ROLE }}-0{{ item.0 + 1 }}"
      Environment: "{{ ENVIRONMENT }}"
      Server_Role: "{{ SERVER_ROLE }}"
    volumes:
      - device_name: /dev/sda1
        volume_type: gp2
        volume_size: "{{ ec2_volume_size }}"
        delete_on_termination: yes
    count: "{{ ec2_count }}"
  with_indexed_items: "{{ ec2_subnet_id }}"
  register: ec2

- set_fact:
    instances_id_list: "{{ ec2.results | get_ec2_info('id') }}"

- name: Add the newly created EC2 instance(s) to the local host group (located at ./inventory/hosts)
  ansible.builtin.lineinfile :
    dest: "./inventory/hosts" 
    regexp: "{{ item }}" 
    insertafter: "[webserver]" 
    line: "{{ item }}"
  with_items: "{{ ec2.results | get_ec2_info('public_ip') }}"
 
- name: Wait for SSH to come up on EC2 Instance(s)
  ansible.builtin.wait_for:
    host: "{{ item }}" 
    port: 22 
    search_regex: OpenSSH
    delay: 10
  with_items: "{{ ec2.results | get_ec2_info('public_ip') }}" 
